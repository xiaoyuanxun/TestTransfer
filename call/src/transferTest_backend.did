type test = 
 service {
   getSubAccount: () -> (AccountIdentifier) query;
   transferOutICP: (AccountIdentifier, nat64) -> (Result);
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: Token;};
   InsufficientFunds: record {balance: Token;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type Token = record {e8s: nat64;};
type Result = 
 variant {
   err: TransferError;
   ok: BlockIndex__1;
 };
type BlockIndex__1 = nat64;
type BlockIndex = nat64;
type AccountIdentifier = blob;
service : () -> test
